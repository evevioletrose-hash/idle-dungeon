// Package models contains all the game data structures and models.
package models

import (
	"sync"
	"time"
)

// Player represents a player in the idle dungeon game.
// Each player has a unique ID, factory for upgrading hero stats,
// and progress tracking their advancement through the dungeon.
type Player struct {
	ID       string    `json:"id"`       // Unique identifier for the player
	Name     string    `json:"name"`     // Display name for the player
	Factory  *Factory  `json:"factory"`  // Hero factory with upgradeable stations
	Progress *Progress `json:"progress"` // Player's dungeon progression and resources
	LastSeen time.Time `json:"lastSeen"` // Last time the player was active
}

// Factory represents the hero production facility that generates heroes for battle.
// It contains four different stations that can be upgraded to improve hero stats.
type Factory struct {
	HPStation     *Station `json:"hpStation"`     // Station that increases hero health points
	ArmorStation  *Station `json:"armorStation"`  // Station that increases hero armor/defense
	LootStation   *Station `json:"lootStation"`   // Station that increases gold rewards from battles
	AttackStation *Station `json:"attackStation"` // Station that increases hero attack damage
}

// Station represents an upgradeable facility within the hero factory.
// Each station can be upgraded to increase its effectiveness multiplier.
type Station struct {
	Level      int     `json:"level"`      // Current upgrade level of the station (starts at 1)
	Multiplier float64 `json:"multiplier"` // Effectiveness multiplier (increases with upgrades)
	Cost       int     `json:"cost"`       // Gold cost to upgrade to the next level
}

// Progress tracks a player's advancement and resources in the game.
type Progress struct {
	DungeonLevel int `json:"dungeonLevel"` // Current dungeon level the player has reached
	Gold         int `json:"gold"`         // Currency used for upgrading factory stations
	Experience   int `json:"experience"`   // Experience points gained from battles
}

// Hero represents a combat unit generated by the factory and sent into battle.
// Hero stats are calculated based on the factory station multipliers.
type Hero struct {
	HP     int `json:"hp"`     // Health points - determines how much damage hero can take
	Armor  int `json:"armor"`  // Armor/defense - reduces incoming damage
	Attack int `json:"attack"` // Attack damage - determines damage dealt to enemies
	Loot   int `json:"loot"`   // Loot multiplier - increases gold rewards from victories
}

// GameState holds the overall state of the game including all active players.
// It uses a mutex to ensure thread-safe access to player data.
type GameState struct {
	Players map[string]*Player `json:"players"` // Map of player ID to Player objects
	mutex   sync.RWMutex                        // Read-write mutex for thread-safe access
}

// NewGameState creates and initializes a new GameState.
func NewGameState() *GameState {
	return &GameState{
		Players: make(map[string]*Player),
	}
}

// GetPlayer safely retrieves a player from the game state.
func (gs *GameState) GetPlayer(playerID string) (*Player, bool) {
	gs.mutex.RLock()
	defer gs.mutex.RUnlock()
	player, exists := gs.Players[playerID]
	return player, exists
}

// SetPlayer safely adds or updates a player in the game state.
func (gs *GameState) SetPlayer(player *Player) {
	gs.mutex.Lock()
	defer gs.mutex.Unlock()
	gs.Players[player.ID] = player
}

// GetAllPlayers safely retrieves all players from the game state.
func (gs *GameState) GetAllPlayers() map[string]*Player {
	gs.mutex.RLock()
	defer gs.mutex.RUnlock()
	
	// Create a copy to avoid race conditions
	players := make(map[string]*Player)
	for id, player := range gs.Players {
		players[id] = player
	}
	return players
}

// NewPlayer creates a new player with default factory and progress values.
func NewPlayer(playerID string) *Player {
	return &Player{
		ID:   playerID,
		Name: "Player " + playerID[:8], // Use first 8 chars of ID as display name
		Factory: &Factory{
			HPStation:     &Station{Level: 1, Multiplier: 1.0, Cost: 100},
			ArmorStation:  &Station{Level: 1, Multiplier: 1.0, Cost: 100},
			LootStation:   &Station{Level: 1, Multiplier: 1.0, Cost: 100},
			AttackStation: &Station{Level: 1, Multiplier: 1.0, Cost: 100},
		},
		Progress: &Progress{
			DungeonLevel: 1,
			Gold:         0,
			Experience:   0,
		},
		LastSeen: time.Now(),
	}
}